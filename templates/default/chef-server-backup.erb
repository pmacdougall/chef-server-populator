#!/opt/chef/embedded/bin/ruby

chef_server_version = File.readlines('/opt/chef-server/version-manifest.txt').detect{|l|l.include?('version-manifest')}.split.last

prefix = [ Time.now.to_i, "ver_#{chef_server_version}", <%= node[:chef_server_populator][:backup][:filename].inspect %> ].join('-')

db_file = File.join(
            <%= node[:chef_server_populator][:backup][:dir].inspect %>,
            [ prefix, 
            'dump' ].join('.') 
          )

data_file = File.join(
              <%= node[:chef_server_populator][:backup][:dir].inspect %>,
              [ prefix, 
              'tar.gz' ].join('.') 
            )

backup_db = system("/opt/chef-server/embedded/bin/pg_dump opscode_chef --username=opscode-pgsql --format=custom > #{db_file}")
backup_data = system("tar -czf #{data_file} -C /var/opt/chef-server/bookshelf data")
 
if backup_db && backup_data
  <% if node[:chef_server_populator][:backup][:remote][:connection] -%>
   creds = <%= node[:chef_server_populator][:backup][:remote][:connection].symbolize_keys %>
   if(creds)
     require 'fog'
     remote = Fog::Storage.new(creds)
     directory = remote.directories.create( :key => <%= node[:chef_server_populator][:backup][:remote][:directory].inspect %> )
     [db_file, data_file].each do |file|
       name = File.basename(file)
       directory.files.create(:key => name, :body => open(file))
       File.delete(file)
     end
   end
   <% end -%>
else
   $stderr.puts "Chef Server Backup Failed!"
   exit -1
end

